////////////////////////////////////////////////////////////////////////////////////////
//
// Nestopia - NES / Famicom emulator written in C++
//
// Copyright (C) 2003 Martin Freij
//
// This file is part of Nestopia.
// 
// Nestopia is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
// 
// Nestopia is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Nestopia; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
////////////////////////////////////////////////////////////////////////////////////////

#include "NstMappers.h"
#include "NstMapper009.h"
		  
NES_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

VOID MAPPER9::Reset()
{
	cpu->SetPort( 0xA000, 0xAFFF, this, Peek_A000, Poke_A000 );
	cpu->SetPort( 0xB000, 0xBFFF, this, Peek_B000, Poke_B000 );
	cpu->SetPort( 0xC000, 0xCFFF, this, Peek_C000, Poke_C000 );
	cpu->SetPort( 0xD000, 0xDFFF, this, Peek_D000, Poke_D000 );
	cpu->SetPort( 0xE000, 0xEFFF, this, Peek_E000, Poke_E000 );
	cpu->SetPort( 0xF000, 0xFFFF, this, Peek_F000, Poke_F000 );

	ppu->SetPort( 0x0FD0, 0x0FDF, this, Latch_0FD0, Poke_Nop );
	ppu->SetPort( 0x0FE0, 0x0FEF, this, Latch_0FE0, Poke_Nop );
	ppu->SetPort( 0x1FD0, 0x1FDF, this, Latch_1FD0, Poke_Nop );
	ppu->SetPort( 0x1FE0, 0x1FEF, this, Latch_1FE0, Poke_Nop );

	pRom.SwapBanks<n8k,0x0000>(0);
	pRom.SwapBanks<n8k,0x2000>(pRom.NumBanks<n8k>() - 3);
	pRom.SwapBanks<n8k,0x4000>(pRom.NumBanks<n8k>() - 2);
	pRom.SwapBanks<n8k,0x6000>(pRom.NumBanks<n8k>() - 1);

	reg[0] =
	reg[1] =
	reg[2] =
	reg[3] = 0;

	latch[0] =
	latch[1] = 0xFE;
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_POKE(MAPPER9,A000)
{
	apu->Update(); 
	pRom.SwapBanks<n8k,0x0000>(data);
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_POKE(MAPPER9,B000)
{
	reg[0] = data; 
	
	if (latch[0] == 0xFD) 
	{
		ppu->Update();
		cRom.SwapBanks<n4k,0x0000>(data);
	}
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_POKE(MAPPER9,C000)
{
	reg[1] = data; 
	
	if (latch[0] == 0xFE) 
	{
		ppu->Update();
		cRom.SwapBanks<n4k,0x0000>(data);
	}
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_POKE(MAPPER9,D000)
{
	reg[2] = data; 
	
	if (latch[1] == 0xFD) 
	{
		ppu->Update();
		cRom.SwapBanks<n4k,0x1000>(data);
	}
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_POKE(MAPPER9,E000)
{
	reg[3] = data; 
	
	if (latch[1] == 0xFE) 
	{
		ppu->Update();
		cRom.SwapBanks<n4k,0x1000>(data);
	}
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_POKE(MAPPER9,F000)
{
	ppu->SetMirroring((data & 0x1) ? MIRROR_HORIZONTAL : MIRROR_VERTICAL);
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_LATCH(MAPPER9,0FD0)
{
	latch[0] = 0xFD;
	cRom.SwapBanks<n4k,0x0000>(reg[0]);
	return cRom[address];
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_LATCH(MAPPER9,0FE0)
{
	latch[0] = 0xFE;
	cRom.SwapBanks<n4k,0x0000>(reg[1]);
	return cRom[address];
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_LATCH(MAPPER9,1FD0)
{
	latch[1] = 0xFD;
	cRom.SwapBanks<n4k,0x1000>(reg[2]);
	return cRom[address];
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_LATCH(MAPPER9,1FE0)
{
	latch[1] = 0xFE;
	cRom.SwapBanks<n4k,0x1000>(reg[3]);
	return cRom[address];
}

NES_NAMESPACE_END

