////////////////////////////////////////////////////////////////////////////////////////
//
// Nestopia - NES / Famicom emulator written in C++
//
// Copyright (C) 2003 Martin Freij
//
// This file is part of Nestopia.
// 
// Nestopia is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
// 
// Nestopia is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Nestopia; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
////////////////////////////////////////////////////////////////////////////////////////

#include "NstMappers.h"
#include "NstMapper234.h"
		  
NES_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

VOID MAPPER234::Reset()
{
	cpu.SetPort( 0xFF80, 0xFF9F, this, Peek_FF80, Poke_FF80 );
	cpu.SetPort( 0xFFE8, 0xFFF7, this, Peek_FFE8, Poke_FFE8 );
	cpu.SetPort( 0x6000, 0x7FFF, this, Peek_Nop,  Poke_Nop  );

	banks[0] = 0;
	banks[1] = 0;

	ppu.SetMirroring(MIRROR_HORIZONTAL);
	pRom.SwapBanks<n32k,0x0000>(0);
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

VOID MAPPER234::UpdateBanks()
{
	apu.Update();
	ppu.Update();

	if (banks[0] & 0x40)
	{
		pRom.SwapBanks<n32k,0x0000>( ((banks[0] & 0xE) << 0) | ((banks[1] >> 0) & 0x1) );
		cRom.SwapBanks<n8k,0x0000> ( ((banks[0] & 0xE) << 2) | ((banks[1] >> 4) & 0x7) );
	}
	else
	{
		pRom.SwapBanks<n32k,0x0000>( ((banks[0] & 0xF) << 0) );
		cRom.SwapBanks<n8k,0x0000> ( ((banks[0] & 0xF) << 2) | ((banks[1] >> 4) & 0x3) );
	}
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

VOID MAPPER234::UpdateBank0(const UINT data)
{
	if (!banks[0])
	{
		banks[0] = data;
		ppu.SetMirroring( (data & 0x80) ? MIRROR_VERTICAL : MIRROR_HORIZONTAL );
		UpdateBanks();
	}
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

VOID MAPPER234::UpdateBank1(const UINT data)
{
	banks[1] = data;
	UpdateBanks();
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_PEEK(MAPPER234,FF80) 
{ 
	const UINT data = pRom[address - 0x8000];
	UpdateBank0(0);
	return data;
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_POKE(MAPPER234,FF80) 
{ 
	UpdateBank0(data);
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_PEEK(MAPPER234,FFE8) 
{ 
	const UINT data = pRom[address - 0x8000];
	UpdateBank1(data);
	return data;
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_POKE(MAPPER234,FFE8) 
{ 
	UpdateBank1(data);
}

NES_NAMESPACE_END
