////////////////////////////////////////////////////////////////////////////////////////
//
// Nestopia - NES / Famicom emulator written in C++
//
// Copyright (C) 2003 Martin Freij
//
// This file is part of Nestopia.
// 
// Nestopia is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
// 
// Nestopia is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Nestopia; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
////////////////////////////////////////////////////////////////////////////////////////

#include "NstMappers.h"
#include "NstMapper040.h"
	   
NES_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

VOID MAPPER40::Reset()
{
	EnableIrqSync(IRQSYNC_COUNT);

	cpu.SetPort( 0x6000, 0x7FFF, this, Peek_wRam, Poke_wRam );

	for (ULONG i=0x8000; i <= 0xFFFF; ++i)
	{
		switch (i & 0xE000)
		{
     		case 0x8000: cpu.SetPort( i, this, Peek_8000, Poke_8000 ); continue;
			case 0xA000: cpu.SetPort( i, this, Peek_A000, Poke_A000 ); continue;
			case 0xE000: cpu.SetPort( i, this, Peek_E000, Poke_E000 ); continue;
		}
	}

	pRom.SwapBanks<n8k,0x0000>( 4 );
	pRom.SwapBanks<n8k,0x2000>( 5 );
	pRom.SwapBanks<n8k,0x4000>( 0 );
	pRom.SwapBanks<n8k,0x6000>( 7 );
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_POKE(MAPPER40,8000) 
{
	SetIrqEnable(FALSE);
	IrqCount = 0;
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_POKE(MAPPER40,A000) 
{ 
	SetIrqEnable(TRUE);
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_POKE(MAPPER40,E000) 
{ 
	apu.Update(); 
	pRom.SwapBanks<n8k,0x4000>(data & 0x7);
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_PEEK(MAPPER40,wRam)
{
	return *pRom.Ram( 0xC000 + (address - 0x6000) );
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_POKE(MAPPER40,wRam)
{
	wRam[address - 0x6000] = data;
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

VOID MAPPER40::IrqSync(const UINT delta)
{
	if ((IrqCount += delta) >= 0x1000)
	{
		SetIrqEnable(FALSE);
		cpu.DoIRQ();
	}
}

NES_NAMESPACE_END

