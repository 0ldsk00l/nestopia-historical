////////////////////////////////////////////////////////////////////////////////////////
//
// Nestopia - NES / Famicom emulator written in C++
//
// Copyright (C) 2003 Martin Freij
//
// This file is part of Nestopia.
// 
// Nestopia is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
// 
// Nestopia is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Nestopia; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
////////////////////////////////////////////////////////////////////////////////////////

#include "NstMappers.h"
#include "NstMapper006.h"
   
NES_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////
// reset
////////////////////////////////////////////////////////////////////////////////////////

VOID MAPPER6::Reset()
{
	if (!cRom.Size())
		EnableCartridgeCRam(TRUE,n32k);

	EnableIrqSync(IRQSYNC_COUNT);

	cpu.SetPort( 0x42FE, this, Peek_Nop, Poke_42FE );
	cpu.SetPort( 0x42FF, this, Peek_Nop, Poke_42FF );
	cpu.SetPort( 0x4501, this, Peek_Nop, Poke_4501 );
	cpu.SetPort( 0x4502, this, Peek_Nop, Poke_4502 );
	cpu.SetPort( 0x4503, this, Peek_Nop, Poke_4503 );

	cpu.SetPort( 0x8000, 0x9FFF, this, Peek_8000, Poke_pRom );
	cpu.SetPort( 0xA000, 0xBFFF, this, Peek_A000, Poke_pRom );
	cpu.SetPort( 0xC000, 0xDFFF, this, Peek_C000, Poke_pRom );
	cpu.SetPort( 0xE000, 0xFFFF, this, Peek_E000, Poke_pRom );

	pRom.SwapBanks<n16k,0x0000>(0);
	pRom.SwapBanks<n16k,0x4000>(7);
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_POKE(MAPPER6,42FE) 
{
	const UINT m = (data & 0x10) ? 1 : 0;
	ppu.SetMirroring(m,m,m,m);
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_POKE(MAPPER6,42FF) 
{
	ppu.SetMirroring((data & 0x10) ? MIRROR_HORIZONTAL : MIRROR_VERTICAL);
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_POKE(MAPPER6,4501) 
{ 
	SetIrqEnable(FALSE);
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_POKE(MAPPER6,4502) 
{ 
	IrqCount = (IrqCount & 0xFF00) | data; 
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_POKE(MAPPER6,4503) 
{ 
	IrqCount = (IrqCount & 0x00FF) | (data << 8); 
	SetIrqEnable(TRUE);
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

NES_POKE(MAPPER6,pRom) 
{
	apu.Update();
	ppu.Update();

	pRom.SwapBanks<n16k,0x0000>( (data & 0x3C) >> 2 );
	cRom.SwapBanks<n8k,0x0000>(  (data & 0x03) >> 0 );
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

VOID MAPPER6::IrqSync(const UINT delta)
{
	if ((IrqCount += delta) >= 0xFFFFUL)
	{
		IrqCount = 0;
		cpu.DoIRQ();
	}
}

NES_NAMESPACE_END

