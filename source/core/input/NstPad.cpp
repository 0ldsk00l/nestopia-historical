////////////////////////////////////////////////////////////////////////////////////////
//
// Nestopia - NES / Famicom emulator written in C++
//
// Copyright (C) 2003 Martin Freij
//
// This file is part of Nestopia.
// 
// Nestopia is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
// 
// Nestopia is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Nestopia; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
////////////////////////////////////////////////////////////////////////////////////////

#include "../NstTypes.h"
#include "../NstMachine.h"
#include "NstPad.h"

NES_NAMESPACE_BEGIN

#define NES_PORT_2_DONE (1UL <<	19)
#define NES_PORT_3_DONE (1UL <<	18)

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

PAD::PAD(const UINT p,const UINT v)
: 
CONTROLLER  (p), 
VirtualPort (v),
state       (0),
count       (0)
{}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

VOID PAD::Reset()
{
	strobe = 0;
	state  = 0;
	count  = 0;
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

VOID PAD::Poll()
{
	if (input)
	{
		state = input->pad[VirtualPort].buttons;

		if ((state & (UP|DOWN)) == (UP|DOWN))
			state &= ~DOWN;

		if ((state & (LEFT|RIGHT)) == (LEFT|RIGHT))
			state &= ~LEFT;

		if (port > 1)
		{
			state <<= 8;
			state |= (port == 3) ? NES_PORT_3_DONE : NES_PORT_2_DONE;
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

UINT PAD::Peek_4016() { return (port & 0x1) ? 0x00 : Read(); }
UINT PAD::Peek_4017() { return (port & 0x1) ? Read() : 0x00; }

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

inline UINT PAD::Read()
{
	const UINT data = (state >> count) & 0x1;
	count = PDX_MIN(count+1,STREAM_LENGTH);
	return data;
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

VOID PAD::Poke_4016(const UINT data)
{
	if (SetStrobe(data))
		count = 0;
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

ULONG PAD::GetState() const
{
	return 
	(
    	(count << 0) | 
		(state << 8) | 
		(strobe ? 0x80000000UL : 0)
	);
}

////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////

VOID PAD::SetState(const ULONG data)
{
	count  = (data & 0x000000FFUL) >> 0;
	state  = (data & 0x7FFFFF00UL) >> 8;
	strobe = (data & 0x80000000UL) >> 31;
}

NES_NAMESPACE_END
